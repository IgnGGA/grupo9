conjuntoDeDatos<-read.csv('Directorio/precio_diadm.csv')

#INSTALACION-LIBRERIAS
library(qcc)
library(ggplot2)
library(qqplotr)
library(corrplot)
library(outliers)
library(dplyr)
library(GGally)
library(factoextra)
library(mice)
library(gridExtra)

names(conjuntoDeDatos)<-c('Peso','Corte','Color','Claridad','Profundidad','Ancho','Precio','X','Y','Z')

#La función str() (structure) proporciona una descripción compacta de la estructura de un objeto de datos, 
#mostrando la estructura de cada variable y las primeras observaciones.
str(conjuntoDeDatos)

#La función summary() proporciona un resumen estadístico de las variables en el conjunto de datos, incluyendo 
#medidas como la media, la mediana, el mínimo, el máximo y los cuartiles para variables numéricas, y una 
#tabla de frecuencias para variables categóricas.
summary(conjuntoDeDatos)

#La función head() muestra las primeras filas del conjunto de datos, lo que puede darte una idea de la 
#estructura y el contenido del conjunto de datos.
head(conjuntoDeDatos)

#Las funciones nrow() y ncol() te darán el número de filas y columnas en el conjunto de datos, respectivamente.
nrow(conjuntoDeDatos)  # Número de filas
ncol(conjuntoDeDatos)  # Número de columnas

# Ordenar el conjunto de datos por la columna de precios de forma descendente
conjuntoDeDatosOrdenado <- conjuntoDeDatos[order(conjuntoDeDatos$Precio, decreasing = TRUE), ]

# Mostrar las primeras 10 filas con los precios más altos : solo quise corroborar algun dato o patron en relacion 
#al valor, pero nada concreto
head(conjuntoDeDatosOrdenado, 10)

# Calcular el valor más bajo y más alto para cada columna
valores_minimos <- sapply(conjuntoDeDatos, min, na.rm = TRUE)
valores_maximos <- sapply(conjuntoDeDatos, max, na.rm = TRUE)

# Crear un nuevo data frame para almacenar los valores
valores_extremos <- data.frame(Min = valores_minimos, Max = valores_maximos)

# Mostrar los valores más bajos y más altos por columna estos son nuestros dato min y max de cada columna
#aun no entiendo el criterio para CORTE; COLOR; CLARIDAD*****************************************************
print(valores_extremos)

# Plot-emos estos datos; como definimos nuestra variable dependiente es Precio
# y las variables independientes son los todos los demas.
#por lo tanto el plot lo contrastamos en base al precio

hist(conjuntoDeDatos$Peso,
     main='Histograma de Peso',
     xlab='Peso',
     ylab='Precio',
     col='orange')

hist(conjuntoDeDatos$Ancho,
     main='Histograma de Ancho',
     xlab='Ancho',
     ylab='Precio',
     col='lightyellow')
    
hist(conjuntoDeDatos$Profundidad,
     main='Histograma de Profundidad',
     xlab='Profundidad',
     ylab='Precio',
     col='lightgreen')

hist(conjuntoDeDatos$X,
     main='Histograma de X',
     xlab='X',
     ylab='Precio',
     col='lightblue')

hist(conjuntoDeDatos$Y,
     main='Histograma de Y',
     xlab='Y',
     ylab='Precio',
     col='purple')

hist(conjuntoDeDatos$Z,
     main='Histograma de Z',
     xlab='Z',
     ylab='Precio',
     col='lightgray')


# Crear el diagrama de dispersión de Precio vs Y
plot(conjuntoDeDatos$Y, conjuntoDeDatos$Precio, 
     xlab = "Y", ylab = "Precio", 
     main = "Diagrama de dispersión de Precio vs Y")

# Ajustamos un modelo de regresión lineal
modelo <- lm(Precio ~ Y, data = conjuntoDeDatos)

# Trazar la línea de regresión
abline(modelo, col = "cyan")


# Hasta aqui lo mismo de siempre.- 
#____________________________________________________________
#____________________________________________________________
#____________________________________________________________
#____________________________________________________________



# Revelacion 1= encontre que las medidas en XYZ estan en o mm, lo que podriamos asumir que estan los 
#datos incorrectos, podriamos inferir que corresponde a un diamante plano.... imposible
# Eliminar filas donde "X", "Y" o "Z" tienen un valor de cero
conjuntoDeDatos <- subset(conjuntoDeDatos, 
                          X != 0 & Y != 0 & Z != 0)

# Eliminar filas donde "X", "Y" o "Z" tienen un valor de cero
conjuntoDeDatos <- conjuntoDeDatos[
  conjuntoDeDatos$X != 0 & 
    conjuntoDeDatos$Y != 0 & 
    conjuntoDeDatos$Z != 0, 
]

# Obtener un resumen estadístico del dataframe y transponer los resultados
Cddv2 <- t(summary(conjuntoDeDatos))

# Mostrar el resumen transpuesto
print(Cddv2)
